#+TITLE: My dotfiles
#+AUTHOR: Sondre Nilsen
#+EMAIL: nilsen.sondre@gmail.com

#+BEGIN_QUOTE
These are my dotfiles, there are many like them but these ones are mine.

    -- Dotfiles Creed
#+END_QUOTE


* Why
For the longest time I've struggled with dotfiles and their management, ranging
from attempts of just adding them to this repository and symlinking them to
their correct place, to trying to document them and configure the package in the
same file using Emacs' org-mode and tangling the output but then I cannot keep
up with documenting and using them... up to the point where I discovered NixOS.

NixOS allows you to declaratively configure your whole system, specifying
packages, settings and users from one or more configuration files and then
building out the whole system for you. This was a revelation for me with regards
to managing a Linux system, no more finding some module header on Arch Wiki,
setting and then subsequently forgetting where I set it and how to find it
again, everything is built from a single source.

Once you fall in love with this way of configuring your system, finding
home-manager is not a long jump. It is what NixOS is to Linux what GNU Stow is
to managing dotfiles.
* Structure
This repository is configured and managed by folders that I think make sense, at
least to me.

- ~bin~ :: Bash scripts that might be useful
- ~hosts~ :: Machine or host specific configuration
- ~config~ :: Contains all the configurations... as one would expect.
  - ~home~ :: My dotfiles and configuration for my user
  - ~nixos~ :: Configuration of the core NixOS experience
  - ~pkgs~ :: Contains overlays of packages that are not (yet) in ~nixpkgs~
  - ~modules~ :: Packages or services that requires their own configuration module
- ~media~ :: Artwork and so on
* How
1. Install NixOS on any machine and then clone these dotfiles, I put them in
   ~$HOME/.dotfiles~.
2. Create a symbolic link from the machine specific configuration into
   ~/etc/nixos/configuration.nix~, e.g.: ~sudo ln -s ~/.dotfiles/neptune.nix
   configuration.nix~.
3. Add the ~unstable~ Nix channel: ~sudo nix-channel --add
   https://nixos.org/channels/nixos-unstable unstable~ and update your package
   list ~sudo nix-channel --update~.
4. Build the configuration and cross your fingers, ~sudo nixos-rebuild switch~.
5. ???
6. Profit!

This will configure a system (specifically my desktop system) with all packages
and ~$HOME~ configuration ready and running, it is stupid simple. Took me about 30
minutes when I got my latest laptop to go from a TTY to a fully configured and
ready Linux desktop.

Finally, there are some minor things that (currently) needs to be manually
symbolically linked:

1. Emacs: ~ln -s ~/.dotfiles/home/emacs/ .emacs.d~
2. Fish: ~ln -s ~/.dotfiles/home/fish/functions/fish_prompt.fish .~
* License
All code is licensed under the MIT license.
